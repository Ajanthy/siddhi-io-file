{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Siddhi IO File The siddhi-io-file extension is an extension to Siddhi that receives and publishes event data from and to files. For information on Siddhi and it's features refer Siddhi Documentation . Download Versions 2.x and above with group id io.siddhi.extension.* from here . Versions 1.x and lower with group id org.wso2.extension.siddhi.* from here . Latest API Docs Latest API Docs is 2.0.1 . Features file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Dependencies There are no other dependencies needed for this extension. Installation For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions . Support and Contribution We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Information"},{"location":"#siddhi-io-file","text":"The siddhi-io-file extension is an extension to Siddhi that receives and publishes event data from and to files. For information on Siddhi and it's features refer Siddhi Documentation .","title":"Siddhi IO File"},{"location":"#download","text":"Versions 2.x and above with group id io.siddhi.extension.* from here . Versions 1.x and lower with group id org.wso2.extension.siddhi.* from here .","title":"Download"},{"location":"#latest-api-docs","text":"Latest API Docs is 2.0.1 .","title":"Latest API Docs"},{"location":"#features","text":"file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source.","title":"Features"},{"location":"#dependencies","text":"There are no other dependencies needed for this extension.","title":"Dependencies"},{"location":"#installation","text":"For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions .","title":"Installation"},{"location":"#support-and-contribution","text":"We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Support and Contribution"},{"location":"license/","text":"Copyright (c) 2019 WSO2 Inc. ( http://www.wso2.org ) All Rights Reserved. WSO2 Inc. licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ------------------------------------------------------------------------- Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","title":"License"},{"location":"api/1.0.0/","text":"API Docs - v1.0.0 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. STRING No No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='/abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='/abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.0"},{"location":"api/1.0.0/#api-docs-v100","text":"","title":"API Docs - v1.0.0"},{"location":"api/1.0.0/#sink","text":"","title":"Sink"},{"location":"api/1.0.0/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.0/#source","text":"","title":"Source"},{"location":"api/1.0.0/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. STRING No No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='/abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='/abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.1/","text":"API Docs - v1.0.1 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. STRING No No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.1"},{"location":"api/1.0.1/#api-docs-v101","text":"","title":"API Docs - v1.0.1"},{"location":"api/1.0.1/#sink","text":"","title":"Sink"},{"location":"api/1.0.1/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.1/#source","text":"","title":"Source"},{"location":"api/1.0.1/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. STRING No No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.10/","text":"API Docs - v1.0.10 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", add.line.separator=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.10"},{"location":"api/1.0.10/#api-docs-v1010","text":"","title":"API Docs - v1.0.10"},{"location":"api/1.0.10/#sink","text":"","title":"Sink"},{"location":"api/1.0.10/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", add.line.separator=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.10/#source","text":"","title":"Source"},{"location":"api/1.0.10/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.11/","text":"API Docs - v1.0.11 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", add.line.separator=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.11"},{"location":"api/1.0.11/#api-docs-v1011","text":"","title":"API Docs - v1.0.11"},{"location":"api/1.0.11/#sink","text":"","title":"Sink"},{"location":"api/1.0.11/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", add.line.separator=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.11/#source","text":"","title":"Source"},{"location":"api/1.0.11/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.12/","text":"API Docs - v1.0.12 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", add.line.separator=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.12"},{"location":"api/1.0.12/#api-docs-v1012","text":"","title":"API Docs - v1.0.12"},{"location":"api/1.0.12/#sink","text":"","title":"Sink"},{"location":"api/1.0.12/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", add.line.separator=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.12/#source","text":"","title":"Source"},{"location":"api/1.0.12/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.13/","text":"API Docs - v1.0.13 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", add.line.separator=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.13"},{"location":"api/1.0.13/#api-docs-v1013","text":"","title":"API Docs - v1.0.13"},{"location":"api/1.0.13/#sink","text":"","title":"Sink"},{"location":"api/1.0.13/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", add.line.separator=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.13/#source","text":"","title":"Source"},{"location":"api/1.0.13/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.14/","text":"API Docs - v1.0.14 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", add.line.separator=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.14"},{"location":"api/1.0.14/#api-docs-v1014","text":"","title":"API Docs - v1.0.14"},{"location":"api/1.0.14/#sink","text":"","title":"Sink"},{"location":"api/1.0.14/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", add.line.separator=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.14/#source","text":"","title":"Source"},{"location":"api/1.0.14/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.2/","text":"API Docs - v1.0.2 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.2"},{"location":"api/1.0.2/#api-docs-v102","text":"","title":"API Docs - v1.0.2"},{"location":"api/1.0.2/#sink","text":"","title":"Sink"},{"location":"api/1.0.2/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.2/#source","text":"","title":"Source"},{"location":"api/1.0.2/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.3/","text":"API Docs - v1.0.3 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.3"},{"location":"api/1.0.3/#api-docs-v103","text":"","title":"API Docs - v1.0.3"},{"location":"api/1.0.3/#sink","text":"","title":"Sink"},{"location":"api/1.0.3/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.3/#source","text":"","title":"Source"},{"location":"api/1.0.3/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.4/","text":"API Docs - v1.0.4 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.4"},{"location":"api/1.0.4/#api-docs-v104","text":"","title":"API Docs - v1.0.4"},{"location":"api/1.0.4/#sink","text":"","title":"Sink"},{"location":"api/1.0.4/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.4/#source","text":"","title":"Source"},{"location":"api/1.0.4/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.5/","text":"API Docs - v1.0.5 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.5"},{"location":"api/1.0.5/#api-docs-v105","text":"","title":"API Docs - v1.0.5"},{"location":"api/1.0.5/#sink","text":"","title":"Sink"},{"location":"api/1.0.5/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.5/#source","text":"","title":"Source"},{"location":"api/1.0.5/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.6/","text":"API Docs - v1.0.6 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.6"},{"location":"api/1.0.6/#api-docs-v106","text":"","title":"API Docs - v1.0.6"},{"location":"api/1.0.6/#sink","text":"","title":"Sink"},{"location":"api/1.0.6/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.6/#source","text":"","title":"Source"},{"location":"api/1.0.6/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.7/","text":"API Docs - v1.0.7 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.7"},{"location":"api/1.0.7/#api-docs-v107","text":"","title":"API Docs - v1.0.7"},{"location":"api/1.0.7/#sink","text":"","title":"Sink"},{"location":"api/1.0.7/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.7/#source","text":"","title":"Source"},{"location":"api/1.0.7/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.8/","text":"API Docs - v1.0.8 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.8"},{"location":"api/1.0.8/#api-docs-v108","text":"","title":"API Docs - v1.0.8"},{"location":"api/1.0.8/#sink","text":"","title":"Sink"},{"location":"api/1.0.8/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.8/#source","text":"","title":"Source"},{"location":"api/1.0.8/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.0.9/","text":"API Docs - v1.0.9 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", add.line.separator=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.0.9"},{"location":"api/1.0.9/#api-docs-v109","text":"","title":"API Docs - v1.0.9"},{"location":"api/1.0.9/#sink","text":"","title":"Sink"},{"location":"api/1.0.9/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", add.line.separator=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.0.9/#source","text":"","title":"Source"},{"location":"api/1.0.9/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.1.0/","text":"API Docs - v1.1.0 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", add.line.separator=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.1.0"},{"location":"api/1.1.0/#api-docs-v110","text":"","title":"API Docs - v1.1.0"},{"location":"api/1.1.0/#sink","text":"","title":"Sink"},{"location":"api/1.1.0/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", add.line.separator=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.1.0/#source","text":"","title":"Source"},{"location":"api/1.1.0/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/1.1.1/","text":"API Docs - v1.1.1 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", add.line.separator=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"1.1.1"},{"location":"api/1.1.1/#api-docs-v111","text":"","title":"API Docs - v1.1.1"},{"location":"api/1.1.1/#sink","text":"","title":"Sink"},{"location":"api/1.1.1/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", add.line.separator=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/1.1.1/#source","text":"","title":"Source"},{"location":"api/1.1.1/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/2.0.0/","text":"API Docs - v2.0.0 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", add.line.separator=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"2.0.0"},{"location":"api/2.0.0/#api-docs-v200","text":"","title":"API Docs - v2.0.0"},{"location":"api/2.0.0/#sink","text":"","title":"Sink"},{"location":"api/2.0.0/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", add.line.separator=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/2.0.0/#source","text":"","title":"Source"},{"location":"api/2.0.0/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/2.0.1/","text":"API Docs - v2.0.1 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", add.line.separator=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"2.0.1"},{"location":"api/2.0.1/#api-docs-v201","text":"","title":"API Docs - v2.0.1"},{"location":"api/2.0.1/#sink","text":"","title":"Sink"},{"location":"api/2.0.1/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", add.line.separator=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/2.0.1/#source","text":"","title":"Source"},{"location":"api/2.0.1/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"},{"location":"api/latest/","text":"API Docs - v2.0.1 Sink file (Sink) File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", add.line.separator=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } } Source file (Source) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"latest"},{"location":"api/latest/#api-docs-v201","text":"","title":"API Docs - v2.0.1"},{"location":"api/latest/#sink","text":"","title":"Sink"},{"location":"api/latest/#file-sink","text":"File Sink can be used to publish (write) event data which is processed within siddhi to files. Siddhi-io-file sink provides support to write both textual and binary data into files Syntax @sink(type=\"file\", file.uri=\"<STRING>\", append=\"<BOOL>\", add.line.separator=\"<BOOL>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.uri Used to specify the file for data to be written. STRING No Yes append This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false', If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. true BOOL Yes No add.line.separator This parameter is used to specify whether events added to the file should be separated by a newline. If add.event.separator= 'true',then a newline will be added after data is added to the file. true. (However, if csv mapper is used, it is false) BOOL Yes No Examples EXAMPLE 1 @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }","title":"file (Sink)"},{"location":"api/latest/#source","text":"","title":"Source"},{"location":"api/latest/#file-source","text":"File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source. Syntax @source(type=\"file\", dir.uri=\"<STRING>\", file.uri=\"<STRING>\", mode=\"<STRING>\", tailing=\"<BOOL>\", action.after.process=\"<STRING>\", action.after.failure=\"<STRING>\", move.after.process=\"<STRING>\", move.after.failure=\"<STRING>\", begin.regex=\"<STRING>\", end.regex=\"<STRING>\", file.polling.interval=\"<STRING>\", dir.polling.interval=\"<STRING>\", timeout=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic dir.uri Used to specify a directory to be processed. All the files inside this directory will be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No file.uri Used to specify a file to be processed. Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. STRING No No mode This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. line STRING Yes No tailing This can either have value true or false. By default it will be true. This attribute allows user to specify whether the file should be tailed or not. If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. true BOOL Yes No action.after.process This parameter is used to specify the action which should be carried out after processing a file in the given directory. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. delete STRING Yes No action.after.failure This parameter is used to specify the action which should be carried out if a failure occurred during the process. It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. delete STRING Yes No move.after.process If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No move.after.failure If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. STRING No No begin.regex This will define the regex to be matched at the beginning of the retrieved content. None STRING Yes No end.regex This will define the regex to be matched at the end of the retrieved content. None STRING Yes No file.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. 1000 STRING Yes No dir.polling.interval This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. 1000 STRING Yes No timeout This parameter is used to specify the maximum time period (in milliseconds) for waiting until a file is processed. 5000 STRING Yes No Examples EXAMPLE 1 @source(type='file', mode='text.full', tailing='false' dir.uri='file://abc/xyz', action.after.process='delete', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted. EXAMPLE 2 @source(type='file', mode='files.repo.line', tailing='true', dir.uri='file://abc/xyz', @map(type='json')) define stream FooStream (symbol string, price float, volume long); Under above configuration, the first file in directory '/abc/xyz' will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.","title":"file (Source)"}]}