{
    "docs": [
        {
            "location": "/", 
            "text": "siddhi-io-file\n\n\nThe \nsiddhi-io-file extension\n is an extension to \nSiddhi\n \nwhich is used to receive/publish event data from/to file. \nIt supports both binary and text formats.\n\n\nFind some useful links below:\n\n\n\n\nSource code\n\n\nReleases\n\n\nIssue tracker\n\n\n\n\nLatest API Docs\n\n\nLatest API Docs is \n1.0.6\n.\n\n\nHow to use\n\n\nUsing the extension in \nWSO2 Stream Processor\n\n\n\n\n\n\nYou can use this extension in the latest \nWSO2 Stream Processor\n that is a part of \nWSO2 Analytics\n offering, with editor, debugger and simulation support. \n\n\n\n\n\n\nThis extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this \nextension you can replace the component \njar\n that can be found in the \nSTREAM_PROCESSOR_HOME\n/lib\n directory.\n\n\n\n\n\n\nUsing the extension as a \njava library\n\n\n\n\nThis extension can be added as a maven dependency along with other Siddhi dependencies to your project.\n\n\n\n\n     \ndependency\n\n        \ngroupId\norg.wso2.extension.siddhi.io.file\n/groupId\n\n        \nartifactId\nsiddhi-io-file\n/artifactId\n\n        \nversion\nx.x.x\n/version\n\n     \n/dependency\n\n\n\n\n\nJenkins Build Status\n\n\n\n\n\n\n\n\n\n\nBranch\n\n\nBuild Status\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\n\n\n\n\n\n\n\n\n\n\nFeatures\n\n\n\n\nfile\n \n(\n(Sink)\n)\nFile Sink can be used to publish (write) event data which is processed within siddhi to files. \nSiddhi-io-file sink provides support to write both textual and binary data into files\n\n\nfile\n \n(\n(Source)\n)\nFile Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source.\n\n\n\n\nHow to Contribute\n\n\n\n\n\n\nPlease report issues at \nGitHub \n  Issue\n   Tracker\n.\n\n\n\n\n\n\nSend your contributions as pull requests to \nmaster branch\n. \n\n\n\n\n\n\nContact us\n\n\n\n\n\n\nPost your questions with the \n\"Siddhi\"\n tag in \nStackoverflow\n. \n\n\n\n\n\n\nSiddhi developers can be contacted via the mailing lists:\n\n\nDevelopers List   : \ndev@wso2.org\n\n\nArchitecture List : \narchitecture@wso2.org\n\n\n\n\n\n\nSupport\n\n\n\n\n\n\nWe are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology. \n\n\n\n\n\n\nFor more details and to take advantage of this unique opportunity contact us via \nhttp://wso2.com/support/\n.", 
            "title": "Welcome to WSO2 Siddhi IO File"
        }, 
        {
            "location": "/#siddhi-io-file", 
            "text": "The  siddhi-io-file extension  is an extension to  Siddhi  \nwhich is used to receive/publish event data from/to file. \nIt supports both binary and text formats.  Find some useful links below:   Source code  Releases  Issue tracker", 
            "title": "siddhi-io-file"
        }, 
        {
            "location": "/#latest-api-docs", 
            "text": "Latest API Docs is  1.0.6 .", 
            "title": "Latest API Docs"
        }, 
        {
            "location": "/#how-to-use", 
            "text": "Using the extension in  WSO2 Stream Processor    You can use this extension in the latest  WSO2 Stream Processor  that is a part of  WSO2 Analytics  offering, with editor, debugger and simulation support.     This extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this \nextension you can replace the component  jar  that can be found in the  STREAM_PROCESSOR_HOME /lib  directory.    Using the extension as a  java library   This extension can be added as a maven dependency along with other Siddhi dependencies to your project.         dependency \n         groupId org.wso2.extension.siddhi.io.file /groupId \n         artifactId siddhi-io-file /artifactId \n         version x.x.x /version \n      /dependency", 
            "title": "How to use"
        }, 
        {
            "location": "/#jenkins-build-status", 
            "text": "Branch  Build Status      master", 
            "title": "Jenkins Build Status"
        }, 
        {
            "location": "/#features", 
            "text": "file   ( (Sink) ) File Sink can be used to publish (write) event data which is processed within siddhi to files.  Siddhi-io-file sink provides support to write both textual and binary data into files  file   ( (Source) ) File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source.", 
            "title": "Features"
        }, 
        {
            "location": "/#how-to-contribute", 
            "text": "Please report issues at  GitHub \n  Issue\n   Tracker .    Send your contributions as pull requests to  master branch .", 
            "title": "How to Contribute"
        }, 
        {
            "location": "/#contact-us", 
            "text": "Post your questions with the  \"Siddhi\"  tag in  Stackoverflow .     Siddhi developers can be contacted via the mailing lists:  Developers List   :  dev@wso2.org  Architecture List :  architecture@wso2.org", 
            "title": "Contact us"
        }, 
        {
            "location": "/#support", 
            "text": "We are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.     For more details and to take advantage of this unique opportunity contact us via  http://wso2.com/support/ .", 
            "title": "Support"
        }, 
        {
            "location": "/api/1.0.6/", 
            "text": "API Docs - v1.0.6\n\n\nSink\n\n\nfile \n(Sink)\n\n\nFile Sink can be used to publish (write) event data which is processed within siddhi to files. \nSiddhi-io-file sink provides support to write both textual and binary data into files\n\n\n\nSyntax\n\n\n@sink(type=\nfile\n, file.uri=\nSTRING\n, append=\nBOOL\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nfile.uri\n\n        \nUsed to specify the file for data to be written. \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nappend\n\n        \nThis parameter is used to specify whether the data should be append to the file or not.\nIf append = 'true', data will be write at the end of the file without changing the existing content.\nIf file does not exist, a new fill will be crated and then data will be written.\nIf append append = 'false', \nIf given file exists, existing content will be deleted and then data will be written back to the file.\nIf given file does not exist, a new file will be created and then data will be written on it.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); \n\n\n\n\nUnder above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below.\n{\n\"event\":{\n\"symbol\":\"WSO2\",\n\"price\":55.6,\n\"volume\":100\n}\n}\n\n\n\nSource\n\n\nfile \n(Source)\n\n\nFile Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source.\n\n\n\nSyntax\n\n\n@source(type=\nfile\n, dir.uri=\nSTRING\n, file.uri=\nSTRING\n, mode=\nSTRING\n, tailing=\nBOOL\n, action.after.process=\nSTRING\n, action.after.failure=\nSTRING\n, move.after.process=\nSTRING\n, move.after.failure=\nSTRING\n, begin.regex=\nSTRING\n, end.regex=\nSTRING\n, file.polling.interval=\nSTRING\n, dir.polling.interval=\nSTRING\n, timeout=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndir.uri\n\n        \nUsed to specify a directory to be processed. \nAll the files inside this directory will be processed. \nOnly one of 'dir.uri' and 'file.uri' should be provided.\nThis uri MUST have the respective protocol specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfile.uri\n\n        \nUsed to specify a file to be processed. \nOnly one of 'dir.uri' and 'file.uri' should be provided.\nThis uri MUST have the respective protocol specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmode\n\n        \nThis parameter is used to specify how files in given directory should.Possible values for this parameter are,\n1. TEXT.FULL : to read a text file completely at once.\n2. BINARY.FULL : to read a binary file completely at once.\n3. LINE : to read a text file line by line.\n4. REGEX : to read a text file and extract data using a regex.\n\n        \nline\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntailing\n\n        \nThis can either have value true or false. By default it will be true. \nThis attribute allows user to specify whether the file should be tailed or not. \nIf tailing is enabled, the first file of the directory will be tailed.\nAlso tailing should not be enabled in 'binary.full' or 'text.full' modes.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \naction.after.process\n\n        \nThis parameter is used to specify the action which should be carried out \nafter processing a file in the given directory. \nIt can be either DELETE or MOVE and default value will be 'DELETE'.\nIf the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter.\n\n        \ndelete\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \naction.after.failure\n\n        \nThis parameter is used to specify the action which should be carried out if a failure occurred during the process. \nIt can be either DELETE or MOVE and default value will be 'DELETE'.\nIf the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter.\n\n        \ndelete\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmove.after.process\n\n        \nIf action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter.\nThis should be the absolute path of the file that going to be created after moving is done.\nThis uri MUST have the respective protocol specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmove.after.failure\n\n        \nIf action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter.\nThis should be the absolute path of the file that going to be created after moving is done.\nThis uri MUST have the respective protocol specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbegin.regex\n\n        \nThis will define the regex to be matched at the beginning of the retrieved content.\n\n        \nNone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nend.regex\n\n        \nThis will define the regex to be matched at the end of the retrieved content.\n\n        \nNone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfile.polling.interval\n\n        \nThis parameter is used to specify the time period (in milliseconds) of a polling cycle for a file.\n\n        \n1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndir.polling.interval\n\n        \nThis parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory.\n\n        \n1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nThis parameter is used to specify the maximum time period (in milliseconds)  for waiting until a file is processed.\n\n        \n5000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='file',\nmode='text.full',\ntailing='false'\n dir.uri='file://abc/xyz',\naction.after.process='delete',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long); \n\n\n\n\n\nUnder above configuration, all the files in directory will be picked and read one by one.\nIn this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'.\nOnce a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream.\nFinally, after reading is finished, the file will be deleted.\n\n\n\nEXAMPLE 2\n\n\n@source(type='file',\nmode='files.repo.line',\ntailing='true',\ndir.uri='file://abc/xyz',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);\n\n\n\n\n\nUnder above configuration, the first file in directory '/abc/xyz'  will be picked and read line by line.\nIn this case, it is assumed that the file contains lines json strings.\nFor each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream.\nOnce file content is completely read, it will keep checking whether a new entry is added to the file or not.\nIf such entry is added, it will be immediately picked up and processed.", 
            "title": "1.0.6"
        }, 
        {
            "location": "/api/1.0.6/#api-docs-v106", 
            "text": "", 
            "title": "API Docs - v1.0.6"
        }, 
        {
            "location": "/api/1.0.6/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.6/#file-sink", 
            "text": "File Sink can be used to publish (write) event data which is processed within siddhi to files.  Siddhi-io-file sink provides support to write both textual and binary data into files  Syntax  @sink(type= file , file.uri= STRING , append= BOOL , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         file.uri \n         Used to specify the file for data to be written.  \n         \n         STRING \n         No \n         Yes \n     \n     \n         append \n         This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false',  If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. \n         true \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long);   Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }", 
            "title": "file (Sink)"
        }, 
        {
            "location": "/api/1.0.6/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.6/#file-source", 
            "text": "File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source.  Syntax  @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         dir.uri \n         Used to specify a directory to be processed.  All the files inside this directory will be processed.  Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. \n         \n         STRING \n         No \n         No \n     \n     \n         file.uri \n         Used to specify a file to be processed.  Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. \n         \n         STRING \n         No \n         No \n     \n     \n         mode \n         This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. \n         line \n         STRING \n         Yes \n         No \n     \n     \n         tailing \n         This can either have value true or false. By default it will be true.  This attribute allows user to specify whether the file should be tailed or not.  If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         action.after.process \n         This parameter is used to specify the action which should be carried out  after processing a file in the given directory.  It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. \n         delete \n         STRING \n         Yes \n         No \n     \n     \n         action.after.failure \n         This parameter is used to specify the action which should be carried out if a failure occurred during the process.  It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. \n         delete \n         STRING \n         Yes \n         No \n     \n     \n         move.after.process \n         If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. \n         \n         STRING \n         No \n         No \n     \n     \n         move.after.failure \n         If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. \n         \n         STRING \n         No \n         No \n     \n     \n         begin.regex \n         This will define the regex to be matched at the beginning of the retrieved content. \n         None \n         STRING \n         Yes \n         No \n     \n     \n         end.regex \n         This will define the regex to be matched at the end of the retrieved content. \n         None \n         STRING \n         Yes \n         No \n     \n     \n         file.polling.interval \n         This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. \n         1000 \n         STRING \n         Yes \n         No \n     \n     \n         dir.polling.interval \n         This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. \n         1000 \n         STRING \n         Yes \n         No \n     \n     \n         timeout \n         This parameter is used to specify the maximum time period (in milliseconds)  for waiting until a file is processed. \n         5000 \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type='file',\nmode='text.full',\ntailing='false'\n dir.uri='file://abc/xyz',\naction.after.process='delete',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);   Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted.  EXAMPLE 2  @source(type='file',\nmode='files.repo.line',\ntailing='true',\ndir.uri='file://abc/xyz',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);  Under above configuration, the first file in directory '/abc/xyz'  will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.", 
            "title": "file (Source)"
        }, 
        {
            "location": "/api/1.0.5/", 
            "text": "API Docs - v1.0.5\n\n\nSink\n\n\nfile \n(Sink)\n\n\nFile Sink can be used to publish (write) event data which is processed within siddhi to files. \nSiddhi-io-file sink provides support to write both textual and binary data into files\n\n\n\nSyntax\n\n\n@sink(type=\nfile\n, file.uri=\nSTRING\n, append=\nBOOL\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nfile.uri\n\n        \nUsed to specify the file for data to be written. \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nappend\n\n        \nThis parameter is used to specify whether the data should be append to the file or not.\nIf append = 'true', data will be write at the end of the file without changing the existing content.\nIf file does not exist, a new fill will be crated and then data will be written.\nIf append append = 'false', \nIf given file exists, existing content will be deleted and then data will be written back to the file.\nIf given file does not exist, a new file will be created and then data will be written on it.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); \n\n\n\n\nUnder above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below.\n{\n\"event\":{\n\"symbol\":\"WSO2\",\n\"price\":55.6,\n\"volume\":100\n}\n}\n\n\n\nSource\n\n\nfile \n(Source)\n\n\nFile Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source.\n\n\n\nSyntax\n\n\n@source(type=\nfile\n, dir.uri=\nSTRING\n, file.uri=\nSTRING\n, mode=\nSTRING\n, tailing=\nBOOL\n, action.after.process=\nSTRING\n, action.after.failure=\nSTRING\n, move.after.process=\nSTRING\n, move.after.failure=\nSTRING\n, begin.regex=\nSTRING\n, end.regex=\nSTRING\n, file.polling.interval=\nSTRING\n, dir.polling.interval=\nSTRING\n, timeout=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndir.uri\n\n        \nUsed to specify a directory to be processed. \nAll the files inside this directory will be processed. \nOnly one of 'dir.uri' and 'file.uri' should be provided.\nThis uri MUST have the respective protocol specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfile.uri\n\n        \nUsed to specify a file to be processed. \nOnly one of 'dir.uri' and 'file.uri' should be provided.\nThis uri MUST have the respective protocol specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmode\n\n        \nThis parameter is used to specify how files in given directory should.Possible values for this parameter are,\n1. TEXT.FULL : to read a text file completely at once.\n2. BINARY.FULL : to read a binary file completely at once.\n3. LINE : to read a text file line by line.\n4. REGEX : to read a text file and extract data using a regex.\n\n        \nline\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntailing\n\n        \nThis can either have value true or false. By default it will be true. \nThis attribute allows user to specify whether the file should be tailed or not. \nIf tailing is enabled, the first file of the directory will be tailed.\nAlso tailing should not be enabled in 'binary.full' or 'text.full' modes.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \naction.after.process\n\n        \nThis parameter is used to specify the action which should be carried out \nafter processing a file in the given directory. \nIt can be either DELETE or MOVE and default value will be 'DELETE'.\nIf the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter.\n\n        \ndelete\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \naction.after.failure\n\n        \nThis parameter is used to specify the action which should be carried out if a failure occurred during the process. \nIt can be either DELETE or MOVE and default value will be 'DELETE'.\nIf the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter.\n\n        \ndelete\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmove.after.process\n\n        \nIf action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter.\nThis should be the absolute path of the file that going to be created after moving is done.\nThis uri MUST have the respective protocol specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmove.after.failure\n\n        \nIf action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter.\nThis should be the absolute path of the file that going to be created after moving is done.\nThis uri MUST have the respective protocol specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbegin.regex\n\n        \nThis will define the regex to be matched at the beginning of the retrieved content.\n\n        \nNone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nend.regex\n\n        \nThis will define the regex to be matched at the end of the retrieved content.\n\n        \nNone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfile.polling.interval\n\n        \nThis parameter is used to specify the time period (in milliseconds) of a polling cycle for a file.\n\n        \n1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndir.polling.interval\n\n        \nThis parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory.\n\n        \n1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nThis parameter is used to specify the maximum time period (in milliseconds)  for waiting until a file is processed.\n\n        \n5000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='file',\nmode='text.full',\ntailing='false'\n dir.uri='file://abc/xyz',\naction.after.process='delete',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long); \n\n\n\n\n\nUnder above configuration, all the files in directory will be picked and read one by one.\nIn this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'.\nOnce a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream.\nFinally, after reading is finished, the file will be deleted.\n\n\n\nEXAMPLE 2\n\n\n@source(type='file',\nmode='files.repo.line',\ntailing='true',\ndir.uri='file://abc/xyz',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);\n\n\n\n\n\nUnder above configuration, the first file in directory '/abc/xyz'  will be picked and read line by line.\nIn this case, it is assumed that the file contains lines json strings.\nFor each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream.\nOnce file content is completely read, it will keep checking whether a new entry is added to the file or not.\nIf such entry is added, it will be immediately picked up and processed.", 
            "title": "1.0.5"
        }, 
        {
            "location": "/api/1.0.5/#api-docs-v105", 
            "text": "", 
            "title": "API Docs - v1.0.5"
        }, 
        {
            "location": "/api/1.0.5/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.5/#file-sink", 
            "text": "File Sink can be used to publish (write) event data which is processed within siddhi to files.  Siddhi-io-file sink provides support to write both textual and binary data into files  Syntax  @sink(type= file , file.uri= STRING , append= BOOL , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         file.uri \n         Used to specify the file for data to be written.  \n         \n         STRING \n         No \n         Yes \n     \n     \n         append \n         This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false',  If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. \n         true \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long);   Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }", 
            "title": "file (Sink)"
        }, 
        {
            "location": "/api/1.0.5/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.5/#file-source", 
            "text": "File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source.  Syntax  @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         dir.uri \n         Used to specify a directory to be processed.  All the files inside this directory will be processed.  Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. \n         \n         STRING \n         No \n         No \n     \n     \n         file.uri \n         Used to specify a file to be processed.  Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. \n         \n         STRING \n         No \n         No \n     \n     \n         mode \n         This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. \n         line \n         STRING \n         Yes \n         No \n     \n     \n         tailing \n         This can either have value true or false. By default it will be true.  This attribute allows user to specify whether the file should be tailed or not.  If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         action.after.process \n         This parameter is used to specify the action which should be carried out  after processing a file in the given directory.  It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. \n         delete \n         STRING \n         Yes \n         No \n     \n     \n         action.after.failure \n         This parameter is used to specify the action which should be carried out if a failure occurred during the process.  It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. \n         delete \n         STRING \n         Yes \n         No \n     \n     \n         move.after.process \n         If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. \n         \n         STRING \n         No \n         No \n     \n     \n         move.after.failure \n         If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. \n         \n         STRING \n         No \n         No \n     \n     \n         begin.regex \n         This will define the regex to be matched at the beginning of the retrieved content. \n         None \n         STRING \n         Yes \n         No \n     \n     \n         end.regex \n         This will define the regex to be matched at the end of the retrieved content. \n         None \n         STRING \n         Yes \n         No \n     \n     \n         file.polling.interval \n         This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. \n         1000 \n         STRING \n         Yes \n         No \n     \n     \n         dir.polling.interval \n         This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. \n         1000 \n         STRING \n         Yes \n         No \n     \n     \n         timeout \n         This parameter is used to specify the maximum time period (in milliseconds)  for waiting until a file is processed. \n         5000 \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type='file',\nmode='text.full',\ntailing='false'\n dir.uri='file://abc/xyz',\naction.after.process='delete',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);   Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted.  EXAMPLE 2  @source(type='file',\nmode='files.repo.line',\ntailing='true',\ndir.uri='file://abc/xyz',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);  Under above configuration, the first file in directory '/abc/xyz'  will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.", 
            "title": "file (Source)"
        }, 
        {
            "location": "/api/1.0.4/", 
            "text": "API Docs - v1.0.4\n\n\nSink\n\n\nfile \n(Sink)\n\n\nFile Sink can be used to publish (write) event data which is processed within siddhi to files. \nSiddhi-io-file sink provides support to write both textual and binary data into files\n\n\n\nSyntax\n\n\n@sink(type=\nfile\n, file.uri=\nSTRING\n, append=\nBOOL\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nfile.uri\n\n        \nUsed to specify the file for data to be written. \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nappend\n\n        \nThis parameter is used to specify whether the data should be append to the file or not.\nIf append = 'true', data will be write at the end of the file without changing the existing content.\nIf file does not exist, a new fill will be crated and then data will be written.\nIf append append = 'false', \nIf given file exists, existing content will be deleted and then data will be written back to the file.\nIf given file does not exist, a new file will be created and then data will be written on it.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); \n\n\n\n\nUnder above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below.\n{\n\"event\":{\n\"symbol\":\"WSO2\",\n\"price\":55.6,\n\"volume\":100\n}\n}\n\n\n\nSource\n\n\nfile \n(Source)\n\n\nFile Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source.\n\n\n\nSyntax\n\n\n@source(type=\nfile\n, dir.uri=\nSTRING\n, file.uri=\nSTRING\n, mode=\nSTRING\n, tailing=\nBOOL\n, action.after.process=\nSTRING\n, action.after.failure=\nSTRING\n, move.after.process=\nSTRING\n, move.after.failure=\nSTRING\n, begin.regex=\nSTRING\n, end.regex=\nSTRING\n, file.polling.interval=\nSTRING\n, dir.polling.interval=\nSTRING\n, timeout=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndir.uri\n\n        \nUsed to specify a directory to be processed. \nAll the files inside this directory will be processed. \nOnly one of 'dir.uri' and 'file.uri' should be provided.\nThis uri MUST have the respective protocol specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfile.uri\n\n        \nUsed to specify a file to be processed. \nOnly one of 'dir.uri' and 'file.uri' should be provided.\nThis uri MUST have the respective protocol specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmode\n\n        \nThis parameter is used to specify how files in given directory should.Possible values for this parameter are,\n1. TEXT.FULL : to read a text file completely at once.\n2. BINARY.FULL : to read a binary file completely at once.\n3. LINE : to read a text file line by line.\n4. REGEX : to read a text file and extract data using a regex.\n\n        \nline\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntailing\n\n        \nThis can either have value true or false. By default it will be true. \nThis attribute allows user to specify whether the file should be tailed or not. \nIf tailing is enabled, the first file of the directory will be tailed.\nAlso tailing should not be enabled in 'binary.full' or 'text.full' modes.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \naction.after.process\n\n        \nThis parameter is used to specify the action which should be carried out \nafter processing a file in the given directory. \nIt can be either DELETE or MOVE and default value will be 'DELETE'.\nIf the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter.\n\n        \ndelete\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \naction.after.failure\n\n        \nThis parameter is used to specify the action which should be carried out if a failure occurred during the process. \nIt can be either DELETE or MOVE and default value will be 'DELETE'.\nIf the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter.\n\n        \ndelete\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmove.after.process\n\n        \nIf action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter.\nThis should be the absolute path of the file that going to be created after moving is done.\nThis uri MUST have the respective protocol specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmove.after.failure\n\n        \nIf action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter.\nThis should be the absolute path of the file that going to be created after moving is done.\nThis uri MUST have the respective protocol specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbegin.regex\n\n        \nThis will define the regex to be matched at the beginning of the retrieved content.\n\n        \nNone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nend.regex\n\n        \nThis will define the regex to be matched at the end of the retrieved content.\n\n        \nNone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfile.polling.interval\n\n        \nThis parameter is used to specify the time period (in milliseconds) of a polling cycle for a file.\n\n        \n1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndir.polling.interval\n\n        \nThis parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory.\n\n        \n1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nThis parameter is used to specify the maximum time period (in milliseconds)  for waiting until a file is processed.\n\n        \n5000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='file',\nmode='text.full',\ntailing='false'\n dir.uri='file://abc/xyz',\naction.after.process='delete',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long); \n\n\n\n\n\nUnder above configuration, all the files in directory will be picked and read one by one.\nIn this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'.\nOnce a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream.\nFinally, after reading is finished, the file will be deleted.\n\n\n\nEXAMPLE 2\n\n\n@source(type='file',\nmode='files.repo.line',\ntailing='true',\ndir.uri='file://abc/xyz',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);\n\n\n\n\n\nUnder above configuration, the first file in directory '/abc/xyz'  will be picked and read line by line.\nIn this case, it is assumed that the file contains lines json strings.\nFor each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream.\nOnce file content is completely read, it will keep checking whether a new entry is added to the file or not.\nIf such entry is added, it will be immediately picked up and processed.", 
            "title": "1.0.4"
        }, 
        {
            "location": "/api/1.0.4/#api-docs-v104", 
            "text": "", 
            "title": "API Docs - v1.0.4"
        }, 
        {
            "location": "/api/1.0.4/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.4/#file-sink", 
            "text": "File Sink can be used to publish (write) event data which is processed within siddhi to files.  Siddhi-io-file sink provides support to write both textual and binary data into files  Syntax  @sink(type= file , file.uri= STRING , append= BOOL , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         file.uri \n         Used to specify the file for data to be written.  \n         \n         STRING \n         No \n         Yes \n     \n     \n         append \n         This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false',  If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. \n         true \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long);   Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }", 
            "title": "file (Sink)"
        }, 
        {
            "location": "/api/1.0.4/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.4/#file-source", 
            "text": "File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source.  Syntax  @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         dir.uri \n         Used to specify a directory to be processed.  All the files inside this directory will be processed.  Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. \n         \n         STRING \n         No \n         No \n     \n     \n         file.uri \n         Used to specify a file to be processed.  Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. \n         \n         STRING \n         No \n         No \n     \n     \n         mode \n         This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. \n         line \n         STRING \n         Yes \n         No \n     \n     \n         tailing \n         This can either have value true or false. By default it will be true.  This attribute allows user to specify whether the file should be tailed or not.  If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         action.after.process \n         This parameter is used to specify the action which should be carried out  after processing a file in the given directory.  It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. \n         delete \n         STRING \n         Yes \n         No \n     \n     \n         action.after.failure \n         This parameter is used to specify the action which should be carried out if a failure occurred during the process.  It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. \n         delete \n         STRING \n         Yes \n         No \n     \n     \n         move.after.process \n         If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. \n         \n         STRING \n         No \n         No \n     \n     \n         move.after.failure \n         If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. \n         \n         STRING \n         No \n         No \n     \n     \n         begin.regex \n         This will define the regex to be matched at the beginning of the retrieved content. \n         None \n         STRING \n         Yes \n         No \n     \n     \n         end.regex \n         This will define the regex to be matched at the end of the retrieved content. \n         None \n         STRING \n         Yes \n         No \n     \n     \n         file.polling.interval \n         This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. \n         1000 \n         STRING \n         Yes \n         No \n     \n     \n         dir.polling.interval \n         This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. \n         1000 \n         STRING \n         Yes \n         No \n     \n     \n         timeout \n         This parameter is used to specify the maximum time period (in milliseconds)  for waiting until a file is processed. \n         5000 \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type='file',\nmode='text.full',\ntailing='false'\n dir.uri='file://abc/xyz',\naction.after.process='delete',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);   Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted.  EXAMPLE 2  @source(type='file',\nmode='files.repo.line',\ntailing='true',\ndir.uri='file://abc/xyz',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);  Under above configuration, the first file in directory '/abc/xyz'  will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.", 
            "title": "file (Source)"
        }, 
        {
            "location": "/api/1.0.3/", 
            "text": "API Docs - v1.0.3\n\n\nSink\n\n\nfile \n(Sink)\n\n\nFile Sink can be used to publish (write) event data which is processed within siddhi to files. \nSiddhi-io-file sink provides support to write both textual and binary data into files\n\n\n\nSyntax\n\n\n@sink(type=\nfile\n, file.uri=\nSTRING\n, append=\nBOOL\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nfile.uri\n\n        \nUsed to specify the file for data to be written. \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nappend\n\n        \nThis parameter is used to specify whether the data should be append to the file or not.\nIf append = 'true', data will be write at the end of the file without changing the existing content.\nIf file does not exist, a new fill will be crated and then data will be written.\nIf append append = 'false', \nIf given file exists, existing content will be deleted and then data will be written back to the file.\nIf given file does not exist, a new file will be created and then data will be written on it.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); \n\n\n\n\nUnder above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below.\n{\n\"event\":{\n\"symbol\":\"WSO2\",\n\"price\":55.6,\n\"volume\":100\n}\n}\n\n\n\nSource\n\n\nfile \n(Source)\n\n\nFile Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source.\n\n\n\nSyntax\n\n\n@source(type=\nfile\n, dir.uri=\nSTRING\n, file.uri=\nSTRING\n, mode=\nSTRING\n, tailing=\nBOOL\n, action.after.process=\nSTRING\n, action.after.failure=\nSTRING\n, move.after.process=\nSTRING\n, move.after.failure=\nSTRING\n, begin.regex=\nSTRING\n, end.regex=\nSTRING\n, file.polling.interval=\nSTRING\n, dir.polling.interval=\nSTRING\n, timeout=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndir.uri\n\n        \nUsed to specify a directory to be processed. \nAll the files inside this directory will be processed. \nOnly one of 'dir.uri' and 'file.uri' should be provided.\nThis uri MUST have the respective protocol specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfile.uri\n\n        \nUsed to specify a file to be processed. \nOnly one of 'dir.uri' and 'file.uri' should be provided.\nThis uri MUST have the respective protocol specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmode\n\n        \nThis parameter is used to specify how files in given directory should.Possible values for this parameter are,\n1. TEXT.FULL : to read a text file completely at once.\n2. BINARY.FULL : to read a binary file completely at once.\n3. LINE : to read a text file line by line.\n4. REGEX : to read a text file and extract data using a regex.\n\n        \nline\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntailing\n\n        \nThis can either have value true or false. By default it will be true. \nThis attribute allows user to specify whether the file should be tailed or not. \nIf tailing is enabled, the first file of the directory will be tailed.\nAlso tailing should not be enabled in 'binary.full' or 'text.full' modes.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \naction.after.process\n\n        \nThis parameter is used to specify the action which should be carried out \nafter processing a file in the given directory. \nIt can be either DELETE or MOVE and default value will be 'DELETE'.\nIf the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter.\n\n        \ndelete\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \naction.after.failure\n\n        \nThis parameter is used to specify the action which should be carried out if a failure occurred during the process. \nIt can be either DELETE or MOVE and default value will be 'DELETE'.\nIf the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter.\n\n        \ndelete\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmove.after.process\n\n        \nIf action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter.\nThis should be the absolute path of the file that going to be created after moving is done.\nThis uri MUST have the respective protocol specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmove.after.failure\n\n        \nIf action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter.\nThis should be the absolute path of the file that going to be created after moving is done.\nThis uri MUST have the respective protocol specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbegin.regex\n\n        \nThis will define the regex to be matched at the beginning of the retrieved content.\n\n        \nNone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nend.regex\n\n        \nThis will define the regex to be matched at the end of the retrieved content.\n\n        \nNone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfile.polling.interval\n\n        \nThis parameter is used to specify the time period (in milliseconds) of a polling cycle for a file.\n\n        \n1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndir.polling.interval\n\n        \nThis parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory.\n\n        \n1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nThis parameter is used to specify the maximum time period (in milliseconds)  for waiting until a file is processed.\n\n        \n5000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='file',\nmode='text.full',\ntailing='false'\n dir.uri='file://abc/xyz',\naction.after.process='delete',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long); \n\n\n\n\n\nUnder above configuration, all the files in directory will be picked and read one by one.\nIn this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'.\nOnce a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream.\nFinally, after reading is finished, the file will be deleted.\n\n\n\nEXAMPLE 2\n\n\n@source(type='file',\nmode='files.repo.line',\ntailing='true',\ndir.uri='file://abc/xyz',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);\n\n\n\n\n\nUnder above configuration, the first file in directory '/abc/xyz'  will be picked and read line by line.\nIn this case, it is assumed that the file contains lines json strings.\nFor each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream.\nOnce file content is completely read, it will keep checking whether a new entry is added to the file or not.\nIf such entry is added, it will be immediately picked up and processed.", 
            "title": "1.0.3"
        }, 
        {
            "location": "/api/1.0.3/#api-docs-v103", 
            "text": "", 
            "title": "API Docs - v1.0.3"
        }, 
        {
            "location": "/api/1.0.3/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.3/#file-sink", 
            "text": "File Sink can be used to publish (write) event data which is processed within siddhi to files.  Siddhi-io-file sink provides support to write both textual and binary data into files  Syntax  @sink(type= file , file.uri= STRING , append= BOOL , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         file.uri \n         Used to specify the file for data to be written.  \n         \n         STRING \n         No \n         Yes \n     \n     \n         append \n         This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false',  If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. \n         true \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long);   Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }", 
            "title": "file (Sink)"
        }, 
        {
            "location": "/api/1.0.3/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.3/#file-source", 
            "text": "File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source.  Syntax  @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         dir.uri \n         Used to specify a directory to be processed.  All the files inside this directory will be processed.  Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. \n         \n         STRING \n         No \n         No \n     \n     \n         file.uri \n         Used to specify a file to be processed.  Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. \n         \n         STRING \n         No \n         No \n     \n     \n         mode \n         This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. \n         line \n         STRING \n         Yes \n         No \n     \n     \n         tailing \n         This can either have value true or false. By default it will be true.  This attribute allows user to specify whether the file should be tailed or not.  If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         action.after.process \n         This parameter is used to specify the action which should be carried out  after processing a file in the given directory.  It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. \n         delete \n         STRING \n         Yes \n         No \n     \n     \n         action.after.failure \n         This parameter is used to specify the action which should be carried out if a failure occurred during the process.  It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. \n         delete \n         STRING \n         Yes \n         No \n     \n     \n         move.after.process \n         If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. \n         \n         STRING \n         No \n         No \n     \n     \n         move.after.failure \n         If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. \n         \n         STRING \n         No \n         No \n     \n     \n         begin.regex \n         This will define the regex to be matched at the beginning of the retrieved content. \n         None \n         STRING \n         Yes \n         No \n     \n     \n         end.regex \n         This will define the regex to be matched at the end of the retrieved content. \n         None \n         STRING \n         Yes \n         No \n     \n     \n         file.polling.interval \n         This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. \n         1000 \n         STRING \n         Yes \n         No \n     \n     \n         dir.polling.interval \n         This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. \n         1000 \n         STRING \n         Yes \n         No \n     \n     \n         timeout \n         This parameter is used to specify the maximum time period (in milliseconds)  for waiting until a file is processed. \n         5000 \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type='file',\nmode='text.full',\ntailing='false'\n dir.uri='file://abc/xyz',\naction.after.process='delete',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);   Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted.  EXAMPLE 2  @source(type='file',\nmode='files.repo.line',\ntailing='true',\ndir.uri='file://abc/xyz',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);  Under above configuration, the first file in directory '/abc/xyz'  will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.", 
            "title": "file (Source)"
        }, 
        {
            "location": "/api/1.0.2/", 
            "text": "API Docs - v1.0.2\n\n\nSink\n\n\nfile \n(Sink)\n\n\nFile Sink can be used to publish (write) event data which is processed within siddhi to files. \nSiddhi-io-file sink provides support to write both textual and binary data into files\n\n\n\nSyntax\n\n\n@sink(type=\nfile\n, file.uri=\nSTRING\n, append=\nBOOL\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nfile.uri\n\n        \nUsed to specify the file for data to be written. \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nappend\n\n        \nThis parameter is used to specify whether the data should be append to the file or not.\nIf append = 'true', data will be write at the end of the file without changing the existing content.\nIf file does not exist, a new fill will be crated and then data will be written.\nIf append append = 'false', \nIf given file exists, existing content will be deleted and then data will be written back to the file.\nIf given file does not exist, a new file will be created and then data will be written on it.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); \n\n\n\n\nUnder above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below.\n{\n\"event\":{\n\"symbol\":\"WSO2\",\n\"price\":55.6,\n\"volume\":100\n}\n}\n\n\n\nSource\n\n\nfile \n(Source)\n\n\nFile Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source.\n\n\n\nSyntax\n\n\n@source(type=\nfile\n, dir.uri=\nSTRING\n, file.uri=\nSTRING\n, mode=\nSTRING\n, tailing=\nBOOL\n, action.after.process=\nSTRING\n, action.after.failure=\nSTRING\n, move.after.process=\nSTRING\n, move.after.failure=\nSTRING\n, begin.regex=\nSTRING\n, end.regex=\nSTRING\n, file.polling.interval=\nSTRING\n, dir.polling.interval=\nSTRING\n, timeout=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndir.uri\n\n        \nUsed to specify a directory to be processed. \nAll the files inside this directory will be processed. \nOnly one of 'dir.uri' and 'file.uri' should be provided.\nThis uri MUST have the respective protocol specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfile.uri\n\n        \nUsed to specify a file to be processed. \nOnly one of 'dir.uri' and 'file.uri' should be provided.\nThis uri MUST have the respective protocol specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmode\n\n        \nThis parameter is used to specify how files in given directory should.Possible values for this parameter are,\n1. TEXT.FULL : to read a text file completely at once.\n2. BINARY.FULL : to read a binary file completely at once.\n3. LINE : to read a text file line by line.\n4. REGEX : to read a text file and extract data using a regex.\n\n        \nline\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntailing\n\n        \nThis can either have value true or false. By default it will be true. \nThis attribute allows user to specify whether the file should be tailed or not. \nIf tailing is enabled, the first file of the directory will be tailed.\nAlso tailing should not be enabled in 'binary.full' or 'text.full' modes.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \naction.after.process\n\n        \nThis parameter is used to specify the action which should be carried out \nafter processing a file in the given directory. \nIt can be either DELETE or MOVE and default value will be 'DELETE'.\nIf the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter.\n\n        \ndelete\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \naction.after.failure\n\n        \nThis parameter is used to specify the action which should be carried out if a failure occurred during the process. \nIt can be either DELETE or MOVE and default value will be 'DELETE'.\nIf the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter.\n\n        \ndelete\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmove.after.process\n\n        \nIf action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter.\nThis should be the absolute path of the file that going to be created after moving is done.\nThis uri MUST have the respective protocol specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmove.after.failure\n\n        \nIf action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter.\nThis should be the absolute path of the file that going to be created after moving is done.\nThis uri MUST have the respective protocol specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbegin.regex\n\n        \nThis will define the regex to be matched at the beginning of the retrieved content.\n\n        \nNone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nend.regex\n\n        \nThis will define the regex to be matched at the end of the retrieved content.\n\n        \nNone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfile.polling.interval\n\n        \nThis parameter is used to specify the time period (in milliseconds) of a polling cycle for a file.\n\n        \n1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndir.polling.interval\n\n        \nThis parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory.\n\n        \n1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nThis parameter is used to specify the maximum time period (in milliseconds)  for waiting until a file is processed.\n\n        \n5000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='file',\nmode='text.full',\ntailing='false'\n dir.uri='file://abc/xyz',\naction.after.process='delete',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long); \n\n\n\n\n\nUnder above configuration, all the files in directory will be picked and read one by one.\nIn this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'.\nOnce a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream.\nFinally, after reading is finished, the file will be deleted.\n\n\n\nEXAMPLE 2\n\n\n@source(type='file',\nmode='files.repo.line',\ntailing='true',\ndir.uri='file://abc/xyz',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);\n\n\n\n\n\nUnder above configuration, the first file in directory '/abc/xyz'  will be picked and read line by line.\nIn this case, it is assumed that the file contains lines json strings.\nFor each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream.\nOnce file content is completely read, it will keep checking whether a new entry is added to the file or not.\nIf such entry is added, it will be immediately picked up and processed.", 
            "title": "1.0.2"
        }, 
        {
            "location": "/api/1.0.2/#api-docs-v102", 
            "text": "", 
            "title": "API Docs - v1.0.2"
        }, 
        {
            "location": "/api/1.0.2/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.2/#file-sink", 
            "text": "File Sink can be used to publish (write) event data which is processed within siddhi to files.  Siddhi-io-file sink provides support to write both textual and binary data into files  Syntax  @sink(type= file , file.uri= STRING , append= BOOL , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         file.uri \n         Used to specify the file for data to be written.  \n         \n         STRING \n         No \n         Yes \n     \n     \n         append \n         This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false',  If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. \n         true \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long);   Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }", 
            "title": "file (Sink)"
        }, 
        {
            "location": "/api/1.0.2/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.2/#file-source", 
            "text": "File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source.  Syntax  @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         dir.uri \n         Used to specify a directory to be processed.  All the files inside this directory will be processed.  Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. \n         \n         STRING \n         No \n         No \n     \n     \n         file.uri \n         Used to specify a file to be processed.  Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. \n         \n         STRING \n         No \n         No \n     \n     \n         mode \n         This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. \n         line \n         STRING \n         Yes \n         No \n     \n     \n         tailing \n         This can either have value true or false. By default it will be true.  This attribute allows user to specify whether the file should be tailed or not.  If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         action.after.process \n         This parameter is used to specify the action which should be carried out  after processing a file in the given directory.  It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. \n         delete \n         STRING \n         Yes \n         No \n     \n     \n         action.after.failure \n         This parameter is used to specify the action which should be carried out if a failure occurred during the process.  It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. \n         delete \n         STRING \n         Yes \n         No \n     \n     \n         move.after.process \n         If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. \n         \n         STRING \n         No \n         No \n     \n     \n         move.after.failure \n         If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. \n         \n         STRING \n         No \n         No \n     \n     \n         begin.regex \n         This will define the regex to be matched at the beginning of the retrieved content. \n         None \n         STRING \n         Yes \n         No \n     \n     \n         end.regex \n         This will define the regex to be matched at the end of the retrieved content. \n         None \n         STRING \n         Yes \n         No \n     \n     \n         file.polling.interval \n         This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. \n         1000 \n         STRING \n         Yes \n         No \n     \n     \n         dir.polling.interval \n         This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. \n         1000 \n         STRING \n         Yes \n         No \n     \n     \n         timeout \n         This parameter is used to specify the maximum time period (in milliseconds)  for waiting until a file is processed. \n         5000 \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type='file',\nmode='text.full',\ntailing='false'\n dir.uri='file://abc/xyz',\naction.after.process='delete',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);   Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted.  EXAMPLE 2  @source(type='file',\nmode='files.repo.line',\ntailing='true',\ndir.uri='file://abc/xyz',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);  Under above configuration, the first file in directory '/abc/xyz'  will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.", 
            "title": "file (Source)"
        }, 
        {
            "location": "/api/1.0.1/", 
            "text": "API Docs - v1.0.1\n\n\nSink\n\n\nfile \n(Sink)\n\n\nFile Sink can be used to publish (write) event data which is processed within siddhi to files. \nSiddhi-io-file sink provides support to write both textual and binary data into files\n\n\n\nSyntax\n\n\n@sink(type=\nfile\n, file.uri=\nSTRING\n, append=\nBOOL\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nfile.uri\n\n        \nUsed to specify the file for data to be written. \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nappend\n\n        \nThis parameter is used to specify whether the data should be append to the file or not.\nIf append = 'true', data will be write at the end of the file without changing the existing content.\nIf file does not exist, a new fill will be crated and then data will be written.\nIf append append = 'false', \nIf given file exists, existing content will be deleted and then data will be written back to the file.\nIf given file does not exist, a new file will be created and then data will be written on it.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); \n\n\n\n\nUnder above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below.\n{\n\"event\":{\n\"symbol\":\"WSO2\",\n\"price\":55.6,\n\"volume\":100\n}\n}\n\n\n\nSource\n\n\nfile \n(Source)\n\n\nFile Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source.\n\n\n\nSyntax\n\n\n@source(type=\nfile\n, dir.uri=\nSTRING\n, file.uri=\nSTRING\n, mode=\nSTRING\n, tailing=\nBOOL\n, action.after.process=\nSTRING\n, action.after.failure=\nSTRING\n, move.after.process=\nSTRING\n, move.after.failure=\nSTRING\n, begin.regex=\nSTRING\n, end.regex=\nSTRING\n, file.polling.interval=\nSTRING\n, dir.polling.interval=\nSTRING\n, timeout=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndir.uri\n\n        \nUsed to specify a directory to be processed. \nAll the files inside this directory will be processed. \nOnly one of 'dir.uri' and 'file.uri' should be provided.\nThis uri MUST have the respective protocol specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfile.uri\n\n        \nUsed to specify a file to be processed. \nOnly one of 'dir.uri' and 'file.uri' should be provided.\nThis uri MUST have the respective protocol specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmode\n\n        \nThis parameter is used to specify how files in given directory should.Possible values for this parameter are,\n1. TEXT.FULL : to read a text file completely at once.\n2. BINARY.FULL : to read a binary file completely at once.\n3. LINE : to read a text file line by line.\n4. REGEX : to read a text file and extract data using a regex.\n\n        \nline\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntailing\n\n        \nThis can either have value true or false. By default it will be true. \nThis attribute allows user to specify whether the file should be tailed or not. \nIf tailing is enabled, the first file of the directory will be tailed.\nAlso tailing should not be enabled in 'binary.full' or 'text.full' modes.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \naction.after.process\n\n        \nThis parameter is used to specify the action which should be carried out \nafter processing a file in the given directory. \nIt can be either DELETE or MOVE and default value will be 'DELETE'.\nIf the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter.\n\n        \ndelete\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \naction.after.failure\n\n        \nThis parameter is used to specify the action which should be carried out if a failure occurred during the process. \nIt can be either DELETE or MOVE and default value will be 'DELETE'.\nIf the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmove.after.process\n\n        \nIf action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter.\nThis should be the absolute path of the file that going to be created after moving is done.\nThis uri MUST have the respective protocol specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmove.after.failure\n\n        \nIf action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter.\nThis should be the absolute path of the file that going to be created after moving is done.\nThis uri MUST have the respective protocol specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbegin.regex\n\n        \nThis will define the regex to be matched at the beginning of the retrieved content.\n\n        \nNone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nend.regex\n\n        \nThis will define the regex to be matched at the end of the retrieved content.\n\n        \nNone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfile.polling.interval\n\n        \nThis parameter is used to specify the time period (in milliseconds) of a polling cycle for a file.\n\n        \n1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndir.polling.interval\n\n        \nThis parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory.\n\n        \n1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nThis parameter is used to specify the maximum time period (in milliseconds)  for waiting until a file is processed.\n\n        \n5000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='file',\nmode='text.full',\ntailing='false'\n dir.uri='file://abc/xyz',\naction.after.process='delete',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long); \n\n\n\n\n\nUnder above configuration, all the files in directory will be picked and read one by one.\nIn this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'.\nOnce a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream.\nFinally, after reading is finished, the file will be deleted.\n\n\n\nEXAMPLE 2\n\n\n@source(type='file',\nmode='files.repo.line',\ntailing='true',\ndir.uri='file://abc/xyz',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);\n\n\n\n\n\nUnder above configuration, the first file in directory '/abc/xyz'  will be picked and read line by line.\nIn this case, it is assumed that the file contains lines json strings.\nFor each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream.\nOnce file content is completely read, it will keep checking whether a new entry is added to the file or not.\nIf such entry is added, it will be immediately picked up and processed.", 
            "title": "1.0.1"
        }, 
        {
            "location": "/api/1.0.1/#api-docs-v101", 
            "text": "", 
            "title": "API Docs - v1.0.1"
        }, 
        {
            "location": "/api/1.0.1/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.1/#file-sink", 
            "text": "File Sink can be used to publish (write) event data which is processed within siddhi to files.  Siddhi-io-file sink provides support to write both textual and binary data into files  Syntax  @sink(type= file , file.uri= STRING , append= BOOL , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         file.uri \n         Used to specify the file for data to be written.  \n         \n         STRING \n         No \n         Yes \n     \n     \n         append \n         This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false',  If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. \n         true \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long);   Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }", 
            "title": "file (Sink)"
        }, 
        {
            "location": "/api/1.0.1/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.1/#file-source", 
            "text": "File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source.  Syntax  @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         dir.uri \n         Used to specify a directory to be processed.  All the files inside this directory will be processed.  Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. \n         \n         STRING \n         No \n         No \n     \n     \n         file.uri \n         Used to specify a file to be processed.  Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. \n         \n         STRING \n         No \n         No \n     \n     \n         mode \n         This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. \n         line \n         STRING \n         Yes \n         No \n     \n     \n         tailing \n         This can either have value true or false. By default it will be true.  This attribute allows user to specify whether the file should be tailed or not.  If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         action.after.process \n         This parameter is used to specify the action which should be carried out  after processing a file in the given directory.  It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. \n         delete \n         STRING \n         Yes \n         No \n     \n     \n         action.after.failure \n         This parameter is used to specify the action which should be carried out if a failure occurred during the process.  It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. \n         \n         STRING \n         No \n         No \n     \n     \n         move.after.process \n         If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. \n         \n         STRING \n         No \n         No \n     \n     \n         move.after.failure \n         If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. \n         \n         STRING \n         No \n         No \n     \n     \n         begin.regex \n         This will define the regex to be matched at the beginning of the retrieved content. \n         None \n         STRING \n         Yes \n         No \n     \n     \n         end.regex \n         This will define the regex to be matched at the end of the retrieved content. \n         None \n         STRING \n         Yes \n         No \n     \n     \n         file.polling.interval \n         This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. \n         1000 \n         STRING \n         Yes \n         No \n     \n     \n         dir.polling.interval \n         This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. \n         1000 \n         STRING \n         Yes \n         No \n     \n     \n         timeout \n         This parameter is used to specify the maximum time period (in milliseconds)  for waiting until a file is processed. \n         5000 \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type='file',\nmode='text.full',\ntailing='false'\n dir.uri='file://abc/xyz',\naction.after.process='delete',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);   Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted.  EXAMPLE 2  @source(type='file',\nmode='files.repo.line',\ntailing='true',\ndir.uri='file://abc/xyz',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);  Under above configuration, the first file in directory '/abc/xyz'  will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.", 
            "title": "file (Source)"
        }, 
        {
            "location": "/api/1.0.0-M12/", 
            "text": "API Docs - v1.0.0-M12\n\n\nSink\n\n\nfile \n(Sink)\n\n\nFile Sink can be used to publish (write) event data which is processed within siddhi to files. \nSiddhi-io-file sink provides support to write both textual and binary data into files\n\n\n\nSyntax\n\n\n@sink(type=\nfile\n, file.uri=\nSTRING\n, append=\nBOOL\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nfile.uri\n\n        \nUsed to specify the file for data to be written. \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nappend\n\n        \nThis parameter is used to specify whether the data should be append to the file or not.\nIf append = 'true', data will be write at the end of the file without changing the existing content.\nIf file does not exist, a new fill will be crated and then data will be written.\nIf append append = 'false', \nIf given file exists, existing content will be deleted and then data will be written back to the file.\nIf given file does not exist, a new file will be created and then data will be written on it.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); \n\n\n\n\nUnder above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below.\n{\n\"event\":{\n\"symbol\":\"WSO2\",\n\"price\":55.6,\n\"volume\":100\n}\n}\n\n\n\nSource\n\n\nfile \n(Source)\n\n\nFile Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source.\n\n\n\nSyntax\n\n\n@source(type=\nfile\n, dir.uri=\nSTRING\n, file.uri=\nSTRING\n, mode=\nSTRING\n, tailing=\nBOOL\n, action.after.process=\nSTRING\n, action.after.failure=\nSTRING\n, move.after.process=\nSTRING\n, move.after.failure=\nSTRING\n, begin.regex=\nSTRING\n, end.regex=\nSTRING\n, file.polling.interval=\nSTRING\n, dir.polling.interval=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndir.uri\n\n        \nUsed to specify a directory to be processed. \nAll the files inside this directory will be processed. \nOnly one of 'dir.uri' and 'file.uri' should be provided.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfile.uri\n\n        \nUsed to specify a file to be processed. \nOnly one of 'dir.uri' and 'file.uri' should be provided.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmode\n\n        \nThis parameter is used to specify how files in given directory should.Possible values for this parameter are,\n1. TEXT.FULL : to read a text file completely at once.\n2. BINARY.FULL : to read a binary file completely at once.\n3. LINE : to read a text file line by line.\n4. REGEX : to read a text file and extract data using a regex.\n\n        \nline\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntailing\n\n        \nThis can either have value true or false. By default it will be true. \nThis attribute allows user to specify whether the file should be tailed or not. \nIf tailing is enabled, the first file of the directory will be tailed.\nAlso tailing should not be enabled in 'binary.full' or 'text.full' modes.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \naction.after.process\n\n        \nThis parameter is used to specify the action which should be carried out \nafter processing a file in the given directory. \nIt can be either DELETE or MOVE and default value will be 'DELETE'.\nIf the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter.\n\n        \ndelete\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \naction.after.failure\n\n        \nThis parameter is used to specify the action which should be carried out if a failure occurred during the process. \nIt can be either DELETE or MOVE and default value will be 'DELETE'.\nIf the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmove.after.process\n\n        \nIf action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter.\nThis should be the absolute path of the file that going to be created after moving is done.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmove.after.failure\n\n        \nIf action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter.\nThis should be the absolute path of the file that going to be created after moving is done.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbegin.regex\n\n        \nThis will define the regex to be matched at the beginning of the retrieved content.\n\n        \nNone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nend.regex\n\n        \nThis will define the regex to be matched at the end of the retrieved content.\n\n        \nNone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfile.polling.interval\n\n        \nThis parameter is used to specify the time period (in milliseconds) of a polling cycle for a file.\n\n        \n1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndir.polling.interval\n\n        \nThis parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory.\n\n        \n1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='file',\nmode='text.full',\ntailing='false'\n dir.uri='/abc/xyz',\naction.after.process='delete',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long); \n\n\n\n\n\nUnder above configuration, all the files in directory will be picked and read one by one.\nIn this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'.\nOnce a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream.\nFinally, after reading is finished, the file will be deleted.\n\n\n\nEXAMPLE 2\n\n\n@source(type='file',\nmode='files.repo.line',\ntailing='true',\ndir.uri='/abc/xyz',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);\n\n\n\n\n\nUnder above configuration, the first file in directory '/abc/xyz'  will be picked and read line by line.\nIn this case, it is assumed that the file contains lines json strings.\nFor each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream.\nOnce file content is completely read, it will keep checking whether a new entry is added to the file or not.\nIf such entry is added, it will be immediately picked up and processed.", 
            "title": "1.0.0-M12"
        }, 
        {
            "location": "/api/1.0.0-M12/#api-docs-v100-m12", 
            "text": "", 
            "title": "API Docs - v1.0.0-M12"
        }, 
        {
            "location": "/api/1.0.0-M12/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.0-M12/#file-sink", 
            "text": "File Sink can be used to publish (write) event data which is processed within siddhi to files.  Siddhi-io-file sink provides support to write both textual and binary data into files  Syntax  @sink(type= file , file.uri= STRING , append= BOOL , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         file.uri \n         Used to specify the file for data to be written.  \n         \n         STRING \n         No \n         Yes \n     \n     \n         append \n         This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false',  If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. \n         true \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long);   Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }", 
            "title": "file (Sink)"
        }, 
        {
            "location": "/api/1.0.0-M12/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.0-M12/#file-source", 
            "text": "File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source.  Syntax  @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         dir.uri \n         Used to specify a directory to be processed.  All the files inside this directory will be processed.  Only one of 'dir.uri' and 'file.uri' should be provided. \n         \n         STRING \n         No \n         No \n     \n     \n         file.uri \n         Used to specify a file to be processed.  Only one of 'dir.uri' and 'file.uri' should be provided. \n         \n         STRING \n         No \n         No \n     \n     \n         mode \n         This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. \n         line \n         STRING \n         Yes \n         No \n     \n     \n         tailing \n         This can either have value true or false. By default it will be true.  This attribute allows user to specify whether the file should be tailed or not.  If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         action.after.process \n         This parameter is used to specify the action which should be carried out  after processing a file in the given directory.  It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. \n         delete \n         STRING \n         Yes \n         No \n     \n     \n         action.after.failure \n         This parameter is used to specify the action which should be carried out if a failure occurred during the process.  It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. \n         \n         STRING \n         No \n         No \n     \n     \n         move.after.process \n         If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. \n         \n         STRING \n         No \n         No \n     \n     \n         move.after.failure \n         If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. \n         \n         STRING \n         No \n         No \n     \n     \n         begin.regex \n         This will define the regex to be matched at the beginning of the retrieved content. \n         None \n         STRING \n         Yes \n         No \n     \n     \n         end.regex \n         This will define the regex to be matched at the end of the retrieved content. \n         None \n         STRING \n         Yes \n         No \n     \n     \n         file.polling.interval \n         This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. \n         1000 \n         STRING \n         Yes \n         No \n     \n     \n         dir.polling.interval \n         This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. \n         1000 \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type='file',\nmode='text.full',\ntailing='false'\n dir.uri='/abc/xyz',\naction.after.process='delete',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);   Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted.  EXAMPLE 2  @source(type='file',\nmode='files.repo.line',\ntailing='true',\ndir.uri='/abc/xyz',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);  Under above configuration, the first file in directory '/abc/xyz'  will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.", 
            "title": "file (Source)"
        }, 
        {
            "location": "/api/1.0.0-M11/", 
            "text": "API Docs - v1.0.0-M11\n\n\nSource\n\n\nfile \n(Source)\n\n\nFile Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source.\n\n\n\nSyntax\n\n\n@source(type=\nfile\n, dir.uri=\nSTRING\n, file.uri=\nSTRING\n, mode=\nSTRING\n, tailing=\nBOOL\n, action.after.process=\nSTRING\n, action.after.failure=\nSTRING\n, move.after.process=\nSTRING\n, move.after.failure=\nSTRING\n, begin.regex=\nSTRING\n, end.regex=\nSTRING\n, file.polling.interval=\nSTRING\n, dir.polling.interval=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndir.uri\n\n        \nUsed to specify a directory to be processed. \nAll the files inside this directory will be processed. \nOnly one of 'dir.uri' and 'file.uri' should be provided.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfile.uri\n\n        \nUsed to specify a file to be processed. \nOnly one of 'dir.uri' and 'file.uri' should be provided.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmode\n\n        \nThis parameter is used to specify how files in given directory should.Possible values for this parameter are,\n1. TEXT.FULL : to read a text file completely at once.\n2. BINARY.FULL : to read a binary file completely at once.\n3. LINE : to read a text file line by line.\n4. REGEX : to read a text file and extract data using a regex.\n\n        \nline\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntailing\n\n        \nThis can either have value true or false. By default it will be true. \nThis attribute allows user to specify whether the file should be tailed or not. \nIf tailing is enabled, the first file of the directory will be tailed.\nAlso tailing should not be enabled in 'binary.full' or 'text.full' modes.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \naction.after.process\n\n        \nThis parameter is used to specify the action which should be carried out \nafter processing a file in the given directory. \nIt can be either DELETE or MOVE and default value will be 'DELETE'.\nIf the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter.\n\n        \ndelete\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \naction.after.failure\n\n        \nThis parameter is used to specify the action which should be carried out if a failure occurred during the process. \nIt can be either DELETE or MOVE and default value will be 'DELETE'.\nIf the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmove.after.process\n\n        \nIf action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter.\nThis should be the absolute path of the file that going to be created after moving is done.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmove.after.failure\n\n        \nIf action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter.\nThis should be the absolute path of the file that going to be created after moving is done.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbegin.regex\n\n        \nThis will define the regex to be matched at the beginning of the retrieved content.\n\n        \nNone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nend.regex\n\n        \nThis will define the regex to be matched at the end of the retrieved content.\n\n        \nNone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfile.polling.interval\n\n        \nThis parameter is used to specify the time period (in milliseconds) of a polling cycle for a file.\n\n        \n1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndir.polling.interval\n\n        \nThis parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory.\n\n        \n1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='file',\nmode='text.full',\ntailing='false'\n dir.uri='/abc/xyz',\naction.after.process='delete',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long); \n\n\n\n\n\nUnder above configuration, all the files in directory will be picked and read one by one.\nIn this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'.\nOnce a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream.\nFinally, after reading is finished, the file will be deleted.\n\n\n\nEXAMPLE 2\n\n\n@source(type='file',\nmode='files.repo.line',\ntailing='true',\ndir.uri='/abc/xyz',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);\n\n\n\n\n\nUnder above configuration, the first file in directory '/abc/xyz'  will be picked and read line by line.\nIn this case, it is assumed that the file contains lines json strings.\nFor each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream.\nOnce file content is completely read, it will keep checking whether a new entry is added to the file or not.\nIf such entry is added, it will be immediately picked up and processed.\n\n\n\nSink\n\n\nfile \n(Sink)\n\n\nFile Sink can be used to publish (write) event data which is processed within siddhi to files. \nSiddhi-io-file sink provides support to write both textual and binary data into files\n\n\n\nSyntax\n\n\n@sink(type=\nfile\n, file.uri=\nSTRING\n, append=\nBOOL\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nfile.uri\n\n        \nUsed to specify the file for data to be written. \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nappend\n\n        \nThis parameter is used to specify whether the data should be append to the file or not.\nIf append = 'true', data will be write at the end of the file without changing the existing content.\nIf file does not exist, a new fill will be crated and then data will be written.\nIf append append = 'false', \nIf given file exists, existing content will be deleted and then data will be written back to the file.\nIf given file does not exist, a new file will be created and then data will be written on it.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); \n\n\n\n\nUnder above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below.\n{\n\"event\":{\n\"symbol\":\"WSO2\",\n\"price\":55.6,\n\"volume\":100\n}\n}", 
            "title": "1.0.0-M11"
        }, 
        {
            "location": "/api/1.0.0-M11/#api-docs-v100-m11", 
            "text": "", 
            "title": "API Docs - v1.0.0-M11"
        }, 
        {
            "location": "/api/1.0.0-M11/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.0-M11/#file-source", 
            "text": "File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source.  Syntax  @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         dir.uri \n         Used to specify a directory to be processed.  All the files inside this directory will be processed.  Only one of 'dir.uri' and 'file.uri' should be provided. \n         \n         STRING \n         No \n         No \n     \n     \n         file.uri \n         Used to specify a file to be processed.  Only one of 'dir.uri' and 'file.uri' should be provided. \n         \n         STRING \n         No \n         No \n     \n     \n         mode \n         This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. \n         line \n         STRING \n         Yes \n         No \n     \n     \n         tailing \n         This can either have value true or false. By default it will be true.  This attribute allows user to specify whether the file should be tailed or not.  If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         action.after.process \n         This parameter is used to specify the action which should be carried out  after processing a file in the given directory.  It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. \n         delete \n         STRING \n         Yes \n         No \n     \n     \n         action.after.failure \n         This parameter is used to specify the action which should be carried out if a failure occurred during the process.  It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. \n         \n         STRING \n         No \n         No \n     \n     \n         move.after.process \n         If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. \n         \n         STRING \n         No \n         No \n     \n     \n         move.after.failure \n         If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. \n         \n         STRING \n         No \n         No \n     \n     \n         begin.regex \n         This will define the regex to be matched at the beginning of the retrieved content. \n         None \n         STRING \n         Yes \n         No \n     \n     \n         end.regex \n         This will define the regex to be matched at the end of the retrieved content. \n         None \n         STRING \n         Yes \n         No \n     \n     \n         file.polling.interval \n         This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. \n         1000 \n         STRING \n         Yes \n         No \n     \n     \n         dir.polling.interval \n         This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. \n         1000 \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type='file',\nmode='text.full',\ntailing='false'\n dir.uri='/abc/xyz',\naction.after.process='delete',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);   Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted.  EXAMPLE 2  @source(type='file',\nmode='files.repo.line',\ntailing='true',\ndir.uri='/abc/xyz',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);  Under above configuration, the first file in directory '/abc/xyz'  will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.", 
            "title": "file (Source)"
        }, 
        {
            "location": "/api/1.0.0-M11/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.0-M11/#file-sink", 
            "text": "File Sink can be used to publish (write) event data which is processed within siddhi to files.  Siddhi-io-file sink provides support to write both textual and binary data into files  Syntax  @sink(type= file , file.uri= STRING , append= BOOL , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         file.uri \n         Used to specify the file for data to be written.  \n         \n         STRING \n         No \n         Yes \n     \n     \n         append \n         This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false',  If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. \n         true \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long);   Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }", 
            "title": "file (Sink)"
        }, 
        {
            "location": "/api/1.0.0-M10/", 
            "text": "API Docs - v1.0.0-M10\n\n\nSource\n\n\nfile \n(Source)\n\n\nFile Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source.\n\n\n\nSyntax\n\n\n@source(type=\nfile\n, dir.uri=\nSTRING\n, file.uri=\nSTRING\n, mode=\nSTRING\n, tailing=\nBOOL\n, action.after.process=\nSTRING\n, action.after.failure=\nSTRING\n, move.after.process=\nSTRING\n, move.after.failure=\nSTRING\n, begin.regex=\nSTRING\n, end.regex=\nSTRING\n, file.polling.interval=\nSTRING\n, dir.polling.interval=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndir.uri\n\n        \nUsed to specify a directory to be processed. \nAll the files inside this directory will be processed. \nOnly one of 'dir.uri' and 'file.uri' should be provided.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfile.uri\n\n        \nUsed to specify a file to be processed. \nOnly one of 'dir.uri' and 'file.uri' should be provided.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmode\n\n        \nThis parameter is used to specify how files in given directory should.Possible values for this parameter are,\n1. TEXT.FULL : to read a text file completely at once.\n2. BINARY.FULL : to read a binary file completely at once.\n3. LINE : to read a text file line by line.\n4. REGEX : to read a text file and extract data using a regex.\n\n        \nline\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntailing\n\n        \nThis can either have value true or false. By default it will be true. \nThis attribute allows user to specify whether the file should be tailed or not. \nIf tailing is enabled, the first file of the directory will be tailed.\nAlso tailing should not be enabled in 'binary.full' or 'text.full' modes.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \naction.after.process\n\n        \nThis parameter is used to specify the action which should be carried out \nafter processing a file in the given directory. \nIt can be either DELETE or MOVE and default value will be 'DELETE'.\nIf the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter.\n\n        \ndelete\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \naction.after.failure\n\n        \nThis parameter is used to specify the action which should be carried out if a failure occurred during the process. \nIt can be either DELETE or MOVE and default value will be 'DELETE'.\nIf the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmove.after.process\n\n        \nIf action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter.\nThis should be the absolute path of the file that going to be created after moving is done.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmove.after.failure\n\n        \nIf action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter.\nThis should be the absolute path of the file that going to be created after moving is done.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbegin.regex\n\n        \nThis will define the regex to be matched at the beginning of the retrieved content.\n\n        \nNone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nend.regex\n\n        \nThis will define the regex to be matched at the end of the retrieved content.\n\n        \nNone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfile.polling.interval\n\n        \nThis parameter is used to specify the time period (in milliseconds) of a polling cycle for a file.\n\n        \n1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndir.polling.interval\n\n        \nThis parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory.\n\n        \n1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='file',\nmode='text.full',\ntailing='false'\n dir.uri='/abc/xyz',\naction.after.process='delete',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long); \n\n\n\n\n\nUnder above configuration, all the files in directory will be picked and read one by one.\nIn this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'.\nOnce a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream.\nFinally, after reading is finished, the file will be deleted.\n\n\n\nEXAMPLE 2\n\n\n@source(type='file',\nmode='files.repo.line',\ntailing='true',\ndir.uri='/abc/xyz',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);\n\n\n\n\n\nUnder above configuration, the first file in directory '/abc/xyz'  will be picked and read line by line.\nIn this case, it is assumed that the file contains lines json strings.\nFor each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream.\nOnce file content is completely read, it will keep checking whether a new entry is added to the file or not.\nIf such entry is added, it will be immediately picked up and processed.\n\n\n\nSink\n\n\nfile \n(Sink)\n\n\nFile Sink can be used to publish (write) event data which is processed within siddhi to files. \nSiddhi-io-file sink provides support to write both textual and binary data into files\n\n\n\nSyntax\n\n\n@sink(type=\nfile\n, file.uri=\nSTRING\n, append=\nBOOL\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nfile.uri\n\n        \nUsed to specify the file for data to be written. \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nappend\n\n        \nThis parameter is used to specify whether the data should be append to the file or not.\nIf append = 'true', data will be write at the end of the file without changing the existing content.\nIf file does not exist, a new fill will be crated and then data will be written.\nIf append append = 'false', \nIf given file exists, existing content will be deleted and then data will be written back to the file.\nIf given file does not exist, a new file will be created and then data will be written on it.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); \n\n\n\n\nUnder above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below.\n{\n\"event\":{\n\"symbol\":\"WSO2\",\n\"price\":55.6,\n\"volume\":100\n}\n}", 
            "title": "1.0.0-M10"
        }, 
        {
            "location": "/api/1.0.0-M10/#api-docs-v100-m10", 
            "text": "", 
            "title": "API Docs - v1.0.0-M10"
        }, 
        {
            "location": "/api/1.0.0-M10/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.0-M10/#file-source", 
            "text": "File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source.  Syntax  @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         dir.uri \n         Used to specify a directory to be processed.  All the files inside this directory will be processed.  Only one of 'dir.uri' and 'file.uri' should be provided. \n         \n         STRING \n         No \n         No \n     \n     \n         file.uri \n         Used to specify a file to be processed.  Only one of 'dir.uri' and 'file.uri' should be provided. \n         \n         STRING \n         No \n         No \n     \n     \n         mode \n         This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. \n         line \n         STRING \n         Yes \n         No \n     \n     \n         tailing \n         This can either have value true or false. By default it will be true.  This attribute allows user to specify whether the file should be tailed or not.  If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         action.after.process \n         This parameter is used to specify the action which should be carried out  after processing a file in the given directory.  It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. \n         delete \n         STRING \n         Yes \n         No \n     \n     \n         action.after.failure \n         This parameter is used to specify the action which should be carried out if a failure occurred during the process.  It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. \n         \n         STRING \n         No \n         No \n     \n     \n         move.after.process \n         If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. \n         \n         STRING \n         No \n         No \n     \n     \n         move.after.failure \n         If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. \n         \n         STRING \n         No \n         No \n     \n     \n         begin.regex \n         This will define the regex to be matched at the beginning of the retrieved content. \n         None \n         STRING \n         Yes \n         No \n     \n     \n         end.regex \n         This will define the regex to be matched at the end of the retrieved content. \n         None \n         STRING \n         Yes \n         No \n     \n     \n         file.polling.interval \n         This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. \n         1000 \n         STRING \n         Yes \n         No \n     \n     \n         dir.polling.interval \n         This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. \n         1000 \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type='file',\nmode='text.full',\ntailing='false'\n dir.uri='/abc/xyz',\naction.after.process='delete',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);   Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted.  EXAMPLE 2  @source(type='file',\nmode='files.repo.line',\ntailing='true',\ndir.uri='/abc/xyz',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);  Under above configuration, the first file in directory '/abc/xyz'  will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.", 
            "title": "file (Source)"
        }, 
        {
            "location": "/api/1.0.0-M10/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.0-M10/#file-sink", 
            "text": "File Sink can be used to publish (write) event data which is processed within siddhi to files.  Siddhi-io-file sink provides support to write both textual and binary data into files  Syntax  @sink(type= file , file.uri= STRING , append= BOOL , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         file.uri \n         Used to specify the file for data to be written.  \n         \n         STRING \n         No \n         Yes \n     \n     \n         append \n         This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false',  If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. \n         true \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long);   Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }", 
            "title": "file (Sink)"
        }, 
        {
            "location": "/api/1.0.0/", 
            "text": "API Docs - v1.0.0\n\n\nSink\n\n\nfile \n(Sink)\n\n\nFile Sink can be used to publish (write) event data which is processed within siddhi to files. \nSiddhi-io-file sink provides support to write both textual and binary data into files\n\n\n\nSyntax\n\n\n@sink(type=\nfile\n, file.uri=\nSTRING\n, append=\nBOOL\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nfile.uri\n\n        \nUsed to specify the file for data to be written. \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nappend\n\n        \nThis parameter is used to specify whether the data should be append to the file or not.\nIf append = 'true', data will be write at the end of the file without changing the existing content.\nIf file does not exist, a new fill will be crated and then data will be written.\nIf append append = 'false', \nIf given file exists, existing content will be deleted and then data will be written back to the file.\nIf given file does not exist, a new file will be created and then data will be written on it.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); \n\n\n\n\nUnder above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below.\n{\n\"event\":{\n\"symbol\":\"WSO2\",\n\"price\":55.6,\n\"volume\":100\n}\n}\n\n\n\nSource\n\n\nfile \n(Source)\n\n\nFile Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source.\n\n\n\nSyntax\n\n\n@source(type=\nfile\n, dir.uri=\nSTRING\n, file.uri=\nSTRING\n, mode=\nSTRING\n, tailing=\nBOOL\n, action.after.process=\nSTRING\n, action.after.failure=\nSTRING\n, move.after.process=\nSTRING\n, move.after.failure=\nSTRING\n, begin.regex=\nSTRING\n, end.regex=\nSTRING\n, file.polling.interval=\nSTRING\n, dir.polling.interval=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndir.uri\n\n        \nUsed to specify a directory to be processed. \nAll the files inside this directory will be processed. \nOnly one of 'dir.uri' and 'file.uri' should be provided.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfile.uri\n\n        \nUsed to specify a file to be processed. \nOnly one of 'dir.uri' and 'file.uri' should be provided.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmode\n\n        \nThis parameter is used to specify how files in given directory should.Possible values for this parameter are,\n1. TEXT.FULL : to read a text file completely at once.\n2. BINARY.FULL : to read a binary file completely at once.\n3. LINE : to read a text file line by line.\n4. REGEX : to read a text file and extract data using a regex.\n\n        \nline\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntailing\n\n        \nThis can either have value true or false. By default it will be true. \nThis attribute allows user to specify whether the file should be tailed or not. \nIf tailing is enabled, the first file of the directory will be tailed.\nAlso tailing should not be enabled in 'binary.full' or 'text.full' modes.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \naction.after.process\n\n        \nThis parameter is used to specify the action which should be carried out \nafter processing a file in the given directory. \nIt can be either DELETE or MOVE and default value will be 'DELETE'.\nIf the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter.\n\n        \ndelete\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \naction.after.failure\n\n        \nThis parameter is used to specify the action which should be carried out if a failure occurred during the process. \nIt can be either DELETE or MOVE and default value will be 'DELETE'.\nIf the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmove.after.process\n\n        \nIf action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter.\nThis should be the absolute path of the file that going to be created after moving is done.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmove.after.failure\n\n        \nIf action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter.\nThis should be the absolute path of the file that going to be created after moving is done.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbegin.regex\n\n        \nThis will define the regex to be matched at the beginning of the retrieved content.\n\n        \nNone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nend.regex\n\n        \nThis will define the regex to be matched at the end of the retrieved content.\n\n        \nNone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfile.polling.interval\n\n        \nThis parameter is used to specify the time period (in milliseconds) of a polling cycle for a file.\n\n        \n1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndir.polling.interval\n\n        \nThis parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory.\n\n        \n1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='file',\nmode='text.full',\ntailing='false'\n dir.uri='/abc/xyz',\naction.after.process='delete',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long); \n\n\n\n\n\nUnder above configuration, all the files in directory will be picked and read one by one.\nIn this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'.\nOnce a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream.\nFinally, after reading is finished, the file will be deleted.\n\n\n\nEXAMPLE 2\n\n\n@source(type='file',\nmode='files.repo.line',\ntailing='true',\ndir.uri='/abc/xyz',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);\n\n\n\n\n\nUnder above configuration, the first file in directory '/abc/xyz'  will be picked and read line by line.\nIn this case, it is assumed that the file contains lines json strings.\nFor each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream.\nOnce file content is completely read, it will keep checking whether a new entry is added to the file or not.\nIf such entry is added, it will be immediately picked up and processed.", 
            "title": "1.0.0"
        }, 
        {
            "location": "/api/1.0.0/#api-docs-v100", 
            "text": "", 
            "title": "API Docs - v1.0.0"
        }, 
        {
            "location": "/api/1.0.0/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/1.0.0/#file-sink", 
            "text": "File Sink can be used to publish (write) event data which is processed within siddhi to files.  Siddhi-io-file sink provides support to write both textual and binary data into files  Syntax  @sink(type= file , file.uri= STRING , append= BOOL , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         file.uri \n         Used to specify the file for data to be written.  \n         \n         STRING \n         No \n         Yes \n     \n     \n         append \n         This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false',  If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. \n         true \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long);   Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }", 
            "title": "file (Sink)"
        }, 
        {
            "location": "/api/1.0.0/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.0/#file-source", 
            "text": "File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source.  Syntax  @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         dir.uri \n         Used to specify a directory to be processed.  All the files inside this directory will be processed.  Only one of 'dir.uri' and 'file.uri' should be provided. \n         \n         STRING \n         No \n         No \n     \n     \n         file.uri \n         Used to specify a file to be processed.  Only one of 'dir.uri' and 'file.uri' should be provided. \n         \n         STRING \n         No \n         No \n     \n     \n         mode \n         This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. \n         line \n         STRING \n         Yes \n         No \n     \n     \n         tailing \n         This can either have value true or false. By default it will be true.  This attribute allows user to specify whether the file should be tailed or not.  If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         action.after.process \n         This parameter is used to specify the action which should be carried out  after processing a file in the given directory.  It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. \n         delete \n         STRING \n         Yes \n         No \n     \n     \n         action.after.failure \n         This parameter is used to specify the action which should be carried out if a failure occurred during the process.  It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. \n         \n         STRING \n         No \n         No \n     \n     \n         move.after.process \n         If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. \n         \n         STRING \n         No \n         No \n     \n     \n         move.after.failure \n         If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. \n         \n         STRING \n         No \n         No \n     \n     \n         begin.regex \n         This will define the regex to be matched at the beginning of the retrieved content. \n         None \n         STRING \n         Yes \n         No \n     \n     \n         end.regex \n         This will define the regex to be matched at the end of the retrieved content. \n         None \n         STRING \n         Yes \n         No \n     \n     \n         file.polling.interval \n         This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. \n         1000 \n         STRING \n         Yes \n         No \n     \n     \n         dir.polling.interval \n         This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. \n         1000 \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type='file',\nmode='text.full',\ntailing='false'\n dir.uri='/abc/xyz',\naction.after.process='delete',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);   Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted.  EXAMPLE 2  @source(type='file',\nmode='files.repo.line',\ntailing='true',\ndir.uri='/abc/xyz',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);  Under above configuration, the first file in directory '/abc/xyz'  will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.", 
            "title": "file (Source)"
        }, 
        {
            "location": "/api/latest/", 
            "text": "API Docs - v1.0.6\n\n\nSink\n\n\nfile \n(Sink)\n\n\nFile Sink can be used to publish (write) event data which is processed within siddhi to files. \nSiddhi-io-file sink provides support to write both textual and binary data into files\n\n\n\nSyntax\n\n\n@sink(type=\nfile\n, file.uri=\nSTRING\n, append=\nBOOL\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nfile.uri\n\n        \nUsed to specify the file for data to be written. \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nappend\n\n        \nThis parameter is used to specify whether the data should be append to the file or not.\nIf append = 'true', data will be write at the end of the file without changing the existing content.\nIf file does not exist, a new fill will be crated and then data will be written.\nIf append append = 'false', \nIf given file exists, existing content will be deleted and then data will be written back to the file.\nIf given file does not exist, a new file will be created and then data will be written on it.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long); \n\n\n\n\nUnder above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below.\n{\n\"event\":{\n\"symbol\":\"WSO2\",\n\"price\":55.6,\n\"volume\":100\n}\n}\n\n\n\nSource\n\n\nfile \n(Source)\n\n\nFile Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source.\n\n\n\nSyntax\n\n\n@source(type=\nfile\n, dir.uri=\nSTRING\n, file.uri=\nSTRING\n, mode=\nSTRING\n, tailing=\nBOOL\n, action.after.process=\nSTRING\n, action.after.failure=\nSTRING\n, move.after.process=\nSTRING\n, move.after.failure=\nSTRING\n, begin.regex=\nSTRING\n, end.regex=\nSTRING\n, file.polling.interval=\nSTRING\n, dir.polling.interval=\nSTRING\n, timeout=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndir.uri\n\n        \nUsed to specify a directory to be processed. \nAll the files inside this directory will be processed. \nOnly one of 'dir.uri' and 'file.uri' should be provided.\nThis uri MUST have the respective protocol specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfile.uri\n\n        \nUsed to specify a file to be processed. \nOnly one of 'dir.uri' and 'file.uri' should be provided.\nThis uri MUST have the respective protocol specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmode\n\n        \nThis parameter is used to specify how files in given directory should.Possible values for this parameter are,\n1. TEXT.FULL : to read a text file completely at once.\n2. BINARY.FULL : to read a binary file completely at once.\n3. LINE : to read a text file line by line.\n4. REGEX : to read a text file and extract data using a regex.\n\n        \nline\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntailing\n\n        \nThis can either have value true or false. By default it will be true. \nThis attribute allows user to specify whether the file should be tailed or not. \nIf tailing is enabled, the first file of the directory will be tailed.\nAlso tailing should not be enabled in 'binary.full' or 'text.full' modes.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \naction.after.process\n\n        \nThis parameter is used to specify the action which should be carried out \nafter processing a file in the given directory. \nIt can be either DELETE or MOVE and default value will be 'DELETE'.\nIf the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter.\n\n        \ndelete\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \naction.after.failure\n\n        \nThis parameter is used to specify the action which should be carried out if a failure occurred during the process. \nIt can be either DELETE or MOVE and default value will be 'DELETE'.\nIf the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter.\n\n        \ndelete\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nmove.after.process\n\n        \nIf action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter.\nThis should be the absolute path of the file that going to be created after moving is done.\nThis uri MUST have the respective protocol specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmove.after.failure\n\n        \nIf action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter.\nThis should be the absolute path of the file that going to be created after moving is done.\nThis uri MUST have the respective protocol specified.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nbegin.regex\n\n        \nThis will define the regex to be matched at the beginning of the retrieved content.\n\n        \nNone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nend.regex\n\n        \nThis will define the regex to be matched at the end of the retrieved content.\n\n        \nNone\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfile.polling.interval\n\n        \nThis parameter is used to specify the time period (in milliseconds) of a polling cycle for a file.\n\n        \n1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndir.polling.interval\n\n        \nThis parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory.\n\n        \n1000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nThis parameter is used to specify the maximum time period (in milliseconds)  for waiting until a file is processed.\n\n        \n5000\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='file',\nmode='text.full',\ntailing='false'\n dir.uri='file://abc/xyz',\naction.after.process='delete',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long); \n\n\n\n\n\nUnder above configuration, all the files in directory will be picked and read one by one.\nIn this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'.\nOnce a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream.\nFinally, after reading is finished, the file will be deleted.\n\n\n\nEXAMPLE 2\n\n\n@source(type='file',\nmode='files.repo.line',\ntailing='true',\ndir.uri='file://abc/xyz',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);\n\n\n\n\n\nUnder above configuration, the first file in directory '/abc/xyz'  will be picked and read line by line.\nIn this case, it is assumed that the file contains lines json strings.\nFor each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream.\nOnce file content is completely read, it will keep checking whether a new entry is added to the file or not.\nIf such entry is added, it will be immediately picked up and processed.", 
            "title": "latest"
        }, 
        {
            "location": "/api/latest/#api-docs-v106", 
            "text": "", 
            "title": "API Docs - v1.0.6"
        }, 
        {
            "location": "/api/latest/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/latest/#file-sink", 
            "text": "File Sink can be used to publish (write) event data which is processed within siddhi to files.  Siddhi-io-file sink provides support to write both textual and binary data into files  Syntax  @sink(type= file , file.uri= STRING , append= BOOL , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         file.uri \n         Used to specify the file for data to be written.  \n         \n         STRING \n         No \n         Yes \n     \n     \n         append \n         This parameter is used to specify whether the data should be append to the file or not. If append = 'true', data will be write at the end of the file without changing the existing content. If file does not exist, a new fill will be crated and then data will be written. If append append = 'false',  If given file exists, existing content will be deleted and then data will be written back to the file. If given file does not exist, a new file will be created and then data will be written on it. \n         true \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='file', @map(type='json'), append='false', file.uri='/abc/{{symbol}}.txt') define stream BarStream (symbol string, price float, volume long);   Under above configuration, for each event, a file will be generated if there's no such a file,and then data will be written to that file as json messagesoutput will looks like below. { \"event\":{ \"symbol\":\"WSO2\", \"price\":55.6, \"volume\":100 } }", 
            "title": "file (Sink)"
        }, 
        {
            "location": "/api/latest/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/latest/#file-source", 
            "text": "File Source provides the functionality for user to feed data to siddhi from files. Both text and binary files are supported by file source.  Syntax  @source(type= file , dir.uri= STRING , file.uri= STRING , mode= STRING , tailing= BOOL , action.after.process= STRING , action.after.failure= STRING , move.after.process= STRING , move.after.failure= STRING , begin.regex= STRING , end.regex= STRING , file.polling.interval= STRING , dir.polling.interval= STRING , timeout= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         dir.uri \n         Used to specify a directory to be processed.  All the files inside this directory will be processed.  Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. \n         \n         STRING \n         No \n         No \n     \n     \n         file.uri \n         Used to specify a file to be processed.  Only one of 'dir.uri' and 'file.uri' should be provided. This uri MUST have the respective protocol specified. \n         \n         STRING \n         No \n         No \n     \n     \n         mode \n         This parameter is used to specify how files in given directory should.Possible values for this parameter are, 1. TEXT.FULL : to read a text file completely at once. 2. BINARY.FULL : to read a binary file completely at once. 3. LINE : to read a text file line by line. 4. REGEX : to read a text file and extract data using a regex. \n         line \n         STRING \n         Yes \n         No \n     \n     \n         tailing \n         This can either have value true or false. By default it will be true.  This attribute allows user to specify whether the file should be tailed or not.  If tailing is enabled, the first file of the directory will be tailed. Also tailing should not be enabled in 'binary.full' or 'text.full' modes. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         action.after.process \n         This parameter is used to specify the action which should be carried out  after processing a file in the given directory.  It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. \n         delete \n         STRING \n         Yes \n         No \n     \n     \n         action.after.failure \n         This parameter is used to specify the action which should be carried out if a failure occurred during the process.  It can be either DELETE or MOVE and default value will be 'DELETE'. If the action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. \n         delete \n         STRING \n         Yes \n         No \n     \n     \n         move.after.process \n         If action.after.process is MOVE, user must specify the location to move consumed files using 'move.after.process' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. \n         \n         STRING \n         No \n         No \n     \n     \n         move.after.failure \n         If action.after.failure is MOVE, user must specify the location to move consumed files using 'move.after.failure' parameter. This should be the absolute path of the file that going to be created after moving is done. This uri MUST have the respective protocol specified. \n         \n         STRING \n         No \n         No \n     \n     \n         begin.regex \n         This will define the regex to be matched at the beginning of the retrieved content. \n         None \n         STRING \n         Yes \n         No \n     \n     \n         end.regex \n         This will define the regex to be matched at the end of the retrieved content. \n         None \n         STRING \n         Yes \n         No \n     \n     \n         file.polling.interval \n         This parameter is used to specify the time period (in milliseconds) of a polling cycle for a file. \n         1000 \n         STRING \n         Yes \n         No \n     \n     \n         dir.polling.interval \n         This parameter is used to specify the time period (in milliseconds) of a polling cycle for a directory. \n         1000 \n         STRING \n         Yes \n         No \n     \n     \n         timeout \n         This parameter is used to specify the maximum time period (in milliseconds)  for waiting until a file is processed. \n         5000 \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type='file',\nmode='text.full',\ntailing='false'\n dir.uri='file://abc/xyz',\naction.after.process='delete',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);   Under above configuration, all the files in directory will be picked and read one by one. In this case, it's assumed that all the files contains json valid json strings with keys 'symbol','price' and 'volume'. Once a file is read, its content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Finally, after reading is finished, the file will be deleted.  EXAMPLE 2  @source(type='file',\nmode='files.repo.line',\ntailing='true',\ndir.uri='file://abc/xyz',\n@map(type='json')) \ndefine stream FooStream (symbol string, price float, volume long);  Under above configuration, the first file in directory '/abc/xyz'  will be picked and read line by line. In this case, it is assumed that the file contains lines json strings. For each line, line content will be converted to an event using siddhi-map-json extension and then, that event will be received to the FooStream. Once file content is completely read, it will keep checking whether a new entry is added to the file or not. If such entry is added, it will be immediately picked up and processed.", 
            "title": "file (Source)"
        }, 
        {
            "location": "/about/license/", 
            "text": "Copyright (c) 2017 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }
    ]
}